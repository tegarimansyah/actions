name: Cache in Main
'on':
  push:
    branches:
      - main
jobs:
  prepare-web-assets:
    if: steps.cache-node-modules.outputs.cache-hit != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        appVariant:
          - base
        audience:
          - dev
          - prod
    outputs:
      appVariant: ${{ matrix.appVariant }}
      audience: ${{ matrix.audience }}
    env:
      APP_VARIANT: ${{ matrix.appVariant }}
      AUDIENCE: ${{ matrix.audience }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Cache state
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install web app dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --immutable
      - name: After Install
        run: ls -la

  prepare-web-assets-macos:
    if: steps.cache-node-modules.outputs.cache-hit != 'true'
    runs-on: macos-latest
    strategy:
      matrix:
        appVariant:
          - base
        audience:
          - dev
          - prod
    outputs:
      appVariant: ${{ matrix.appVariant }}
      audience: ${{ matrix.audience }}
    env:
      APP_VARIANT: ${{ matrix.appVariant }}
      AUDIENCE: ${{ matrix.audience }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Cache state
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install web app dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --immutable
      - name: After Install
        run: ls -la